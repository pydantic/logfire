[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "logfire"
version = "2.6.2"
description = "The best Python observability tool! ðŸªµðŸ”¥"
requires-python = ">=3.8"
authors = [
    { name = "Pydantic Team", email = "engineering@pydantic.dev" },
    { name = "Samuel Colvin", email = "samuel@pydantic.dev" },
    { name = "Hasan Ramezani", email = "hasan@pydantic.dev" },
    { name = "Adrian Garcia Badaracco", email = "adrian@pydantic.dev" },
    { name = "David Montague", email = "david@pydantic.dev" },
    { name = "Marcelo Trylesinski", email = "marcelo@pydantic.dev" },
    { name = "David Hewitt", email = "david.hewitt@pydantic.dev" },
    { name = "Alex Hall", email = "alex@pydantic.dev" },
]
license = "MIT"
readme = "README.md"
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3 :: Only',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Intended Audience :: Developers',
    'Intended Audience :: Information Technology',
    'Intended Audience :: System Administrators',
    'License :: OSI Approved :: MIT License',
    'Operating System :: Unix',
    'Operating System :: POSIX :: Linux',
    'Environment :: Console',
    'Environment :: MacOS X',
    'Topic :: Software Development :: Libraries :: Python Modules',
    'Topic :: Internet',
    'Framework :: OpenTelemetry',
    'Framework :: OpenTelemetry :: Distros',
    'Framework :: OpenTelemetry :: Exporters',
    'Framework :: OpenTelemetry :: Instrumentations',
]
dependencies = [
    "opentelemetry-sdk >= 1.21.0",
    "opentelemetry-exporter-otlp-proto-http >= 1.21.0",
    "opentelemetry-instrumentation >= 0.41b0",
    "rich >= 13.4.2",
    "protobuf >= 4.23.4",
    "typing-extensions >= 4.1.0",
    "tomli >= 2.0.1; python_version < '3.11'",
    "executing >= 2.0.1",
]

[project.optional-dependencies]
system-metrics = ["opentelemetry-instrumentation-system-metrics >= 0.42b0"]
asgi = ["opentelemetry-instrumentation-asgi >= 0.42b0"]
wsgi = ["opentelemetry-instrumentation-wsgi >= 0.42b0"]
aiohttp = ["opentelemetry-instrumentation-aiohttp-client >= 0.42b0"]
celery = ["opentelemetry-instrumentation-celery >= 0.42b0"]
django = ["opentelemetry-instrumentation-django >= 0.42b0"]
fastapi = ["opentelemetry-instrumentation-fastapi >= 0.42b0"]
flask = ["opentelemetry-instrumentation-flask >= 0.42b0"]
httpx = ["opentelemetry-instrumentation-httpx >= 0.42b0"]
starlette = ["opentelemetry-instrumentation-starlette >= 0.42b0"]
sqlalchemy = ["opentelemetry-instrumentation-sqlalchemy >= 0.42b0"]
asyncpg = ["opentelemetry-instrumentation-asyncpg >= 0.42b0"]
psycopg = ["opentelemetry-instrumentation-psycopg >= 0.42b0", "packaging"]
psycopg2 = ["opentelemetry-instrumentation-psycopg2 >= 0.42b0", "packaging"]
pymongo = ["opentelemetry-instrumentation-pymongo >= 0.42b0"]
redis = ["opentelemetry-instrumentation-redis >= 0.42b0"]
requests = ["opentelemetry-instrumentation-requests >= 0.42b0"]
mysql = ["opentelemetry-instrumentation-mysql >= 0.42b0"]
sqlite3 = ["opentelemetry-instrumentation-sqlite3 >= 0.42b0"]
aws-lambda = ["opentelemetry-instrumentation-aws-lambda >= 0.42b0"]

[project.scripts]
logfire = "logfire.cli:main"

[project.entry-points."pydantic"]
logfire-plugin = "logfire.integrations.pydantic:plugin"

[project.entry-points."pytest11"]
logfire = "logfire.testing"

[dependency-groups]
dev = [
    "anyio < 4.4.0",
    "httpx >= 0.27.2",
    "aiohttp >= 3.10.9",
    "redis >= 5.1.1",
    "pymongo >= 4.10.1",
    "fastapi >= 0.115.0",
    "Flask >= 3.0.3",
    "django >= 4.2.16",
    "dirty-equals >= 0.8.0",
    "pytest >= 8.3.4",
    "pytest-django",
    "pytest-pretty",
    "pydantic @ git+https://github.com/pydantic/pydantic",
    "requests",
    "sqlalchemy",
    "pandas>=2.1.2; python_version >= '3.9'",
    "pandas; python_version < '3.9'",
    "attrs",
    "openai",
    "opentelemetry-instrumentation-aiohttp-client>=0.42b0",
    "opentelemetry-instrumentation-asgi>=0.42b0",
    "opentelemetry-instrumentation-wsgi>=0.42b0",
    "opentelemetry-instrumentation-fastapi>=0.42b0",
    "opentelemetry-instrumentation-starlette>=0.42b0",
    "opentelemetry-instrumentation-flask>=0.42b0",
    "opentelemetry-instrumentation-django>=0.42b0",
    "opentelemetry-instrumentation-httpx>=0.42b0",
    "opentelemetry-instrumentation-requests>=0.42b0",
    "opentelemetry-instrumentation-sqlalchemy>=0.42b0",
    "opentelemetry-instrumentation-system-metrics>=0.42b0",
    "opentelemetry-instrumentation-asyncpg>=0.42b0",
    "opentelemetry-instrumentation-psycopg>=0.42b0",
    "opentelemetry-instrumentation-psycopg2>=0.42b0",
    "opentelemetry-instrumentation-redis>=0.42b0",
    "opentelemetry-instrumentation-pymongo>=0.42b0",
    "opentelemetry-instrumentation-celery>=0.42b0",
    "opentelemetry-instrumentation-mysql>=0.42b0",
    "opentelemetry-instrumentation-sqlite3>=0.42b0",
    "opentelemetry-instrumentation-aws-lambda>=0.42b0",
    "eval-type-backport",
    "requests-mock",
    "inline-snapshot",
    "structlog",
    "loguru",
    "ruff",
    "pyright>=1.1.360",
    "pre-commit>=3.5.0",
    "coverage[toml]>=7.5.0",
    "psycopg[binary]",
    "psycopg2-binary",
    "asyncpg",
    "pymysql",
    "cryptography",
    "cloudpickle>=3.0.0",
    "anthropic>=0.27.0",
    "sqlmodel",
    "mypy>=1.10.0",
    "celery>=5.4.0",
    "testcontainers>3.7.1; python_version >= '3.9'",
    "testcontainers==3.7.1; python_version < '3.9'",
    "mysql-connector-python~=8.0",
    "pyarrow>=17.0.0",
    # It looks like numpy didn't use to have `requires-python`, so we need to specify the version.
    "numpy>=2.0; python_version >= '3.9' and python_version < '3.12'",
    "numpy<1.24.4; python_version < '3.9'",
    "pytest-recording>=0.13.2",
    "vcrpy>=6",
    "uvicorn>=0.30.6",
    "logfire-api",
    "requests",
    "setuptools>=75.3.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.17",
    "mkdocs-glightbox>=0.4.0",
    "mkdocstrings-python>=1.8.0",
    "mkdocs-redirects>=1.2.1",
    "griffe",
]

[tool.uv.sources]
logfire-api = { workspace = true }

[tool.uv]
default-groups = ["dev", "docs"]

[tool.uv.workspace]
members = ["logfire-api"]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["logfire"]

[tool.hatch.build.targets.sdist]
include = ["/README.md", "CHANGELOG.md", "/Makefile", "/logfire", "/tests"]

# https://beta.ruff.rs/docs/configuration/
[tool.ruff]
line-length = 120
extend-exclude = ["logfire-api/logfire_api/*"]

[tool.ruff.lint]
extend-select = [
    "Q",
    "RUF100",
    "C90",
    "UP",
    "I",
    "D",
    "DTZ005", # https://docs.astral.sh/ruff/rules/call-datetime-now-without-tzinfo/
] # add "T" to disallow prints
flake8-quotes = { inline-quotes = "single", multiline-quotes = "double" }
isort = { combine-as-imports = true, known-first-party = [
    "logfire",
    "logfire_api",
] }
mccabe = { max-complexity = 14 }
ignore = [
    "D107", # ignore missing docstring in __init__ methods
    "D100", # ignore missing docstring in module
    "D104", # ignore missing docstring in public package
    "D105", # ignore missing docstring in magic methods
    "D418", # allow docstrings on overloads for the sake of logfire-api stubs
    "C901", # ignore too complex functions, doesn't seem to be worth it
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["D"]
"docs/**/*.py" = ["D"]
"logfire-api/logfire_api/**/*.py" = ["D"]

[tool.ruff.format]
docstring-code-format = true
quote-style = "single"

[tool.pyright]
typeCheckingMode = "strict"
reportUnnecessaryTypeIgnoreComment = true
reportMissingTypeStubs = false
exclude = [
    "docs/**/*.py",
    "examples/**/*.py",
    "site/**/*.py",
    ".venv",
    "venv*",
    "**/venv*",
    "ignoreme",
    "out",
    "logfire-api",
]
venvPath = "."
venv = ".venv"

[tool.pytest.ini_options]
xfail_strict = true
filterwarnings = [
    "error",
    # fastapi uses deprecated pydantic functions
    "ignore:`FieldValidationInfo` is deprecated.*:DeprecationWarning:pydantic_core:",
    "ignore:`general_(before|after|wrap|plain)_validator_function` is deprecated.*:DeprecationWarning:fastapi:",
    "ignore:`general_(before|after|wrap|plain)_validator_function` is deprecated.*:DeprecationWarning:pydantic_core:",
    # google packages are using deprecated APIs
    "ignore::DeprecationWarning:pkg_resources*:",
    "ignore::DeprecationWarning:google*:",
    "ignore:.* google._upb._message.*:DeprecationWarning",
    # OTEL uses some deprecated APIs
    "ignore:pkg_resources:DeprecationWarning:opentelemetry.instrumentation.dependencies*:",
    # To be able to test numpy.matrix
    "ignore:the matrix subclass is not the recommended way.*:PendingDeprecationWarning",
    # See test_filter_warnings in test_testing.py
    'ignore:(?s).*google/cloud/pubsub_v1/subscriber/_protocol/streaming_pull_manager.*scheduler\.shutdown.*IndexError. tuple index out of range:pytest.PytestUnhandledThreadExceptionWarning',
    'ignore:(?s).*aiosqlite/core\.py.*get_loop\(future\).call_soon_threadsafe.*RuntimeError. Event loop is closed:pytest.PytestUnhandledThreadExceptionWarning',
    # This problem is fixed in https://github.com/open-telemetry/opentelemetry-python-contrib/pull/2013, but not the warning.
    "ignore:The '__version__' attribute is deprecated and will be removed in Flask 3.1:DeprecationWarning",
    # ignore DeprecationWarning from httpx - Marcelo knows why this is happening
    "ignore:The 'app' shortcut is now deprecated.*:DeprecationWarning:httpx*:",
]
DJANGO_SETTINGS_MODULE = "tests.otel_integrations.django_test_project.django_test_site.settings"

# https://coverage.readthedocs.io/en/latest/config.html#run
[tool.coverage.run]
branch = true
# Use this to get the tests that are covering the code. This is disabled by default because it can be slow.
# dynamic_context = "test_function"

# https://coverage.readthedocs.io/en/latest/config.html#report
[tool.coverage.report]
skip_covered = true
show_missing = true
ignore_errors = true
precision = 2
exclude_lines = [
    'def __repr__',
    'pragma: no cover',
    'raise NotImplementedError',
    'if TYPE_CHECKING:',
    'if typing.TYPE_CHECKING:',
    '@overload',
    '@typing.overload',
    '\(Protocol\):$',
    'typing.assert_never',
    'assert_never',
    'if __name__ == .__main__.:',
]
